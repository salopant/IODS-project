hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", probability = TRUE)
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", probability = TRUE)
par(mfrow=c(2,1))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years")
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years")
#par(mfrow=c(2,1))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = "blue")
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = "red", add=TRUE)
#par(mfrow=c(2,1))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = "blue")
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = "red", add=TRUE, aplha=0.3)
#par(mfrow=c(2,1))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = "blue")
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = "red", add=TRUE, aplha=0.7)
#par(mfrow=c(2,1))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = "blue")
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = "red", add=TRUE, alpha=0.7)
#par(mfrow=c(2,1))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = "blue")
color_transparent <- adjustcolor("red", alpha.f = 0.3)
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = color_transparent, add=TRUE, )
#par(mfrow=c(2,1))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = "blue")
color_transparent <- adjustcolor("red", alpha.f = 0.7)
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = color_transparent, add=TRUE, )
#par(mfrow=c(2,1))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = "blue")
color_transparent <- adjustcolor("red", alpha.f = 0.5)
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = color_transparent, add=TRUE, )
#par(mfrow=c(2,1))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = "blue")
color_transparent <- adjustcolor("red", alpha.f = 0.5)
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = color_transparent, add=TRUE)
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend(0.8,1.1, as.vector(unique(lrn2014$gender)),  fill=c("black", "red"))
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend(0,1.1, as.vector(unique(lrn2014$gender)),  fill=c("black", "red"))
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
par(xpd=TRUE)
legend(0,1.1, as.vector(unique(lrn2014$gender)),  fill=c("black", "red"))
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend("topright", c("Germany", "Plastic"), col=c("blue", "red"), lwd=10)
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend("topright", c("Germany", "Plastic"), col=colors, lwd=10)
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend("topright", c("Female", "Male"), col=colors, lwd=10)
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend("topright", c("Female", "Male"), col=colors, lwd=5)
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend("topright", c("Female", "Male"), col=colors, lwd=5, wwd=5)
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend("topright", c("Female", "Male"), col=colors, lwd=5)
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend(1,1, c("Female", "Male"), col=colors, lwd=5)
#par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of female respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"], main = "Age of male respondents", xlab = "Age in years", col = colors[2], add=TRUE)
legend("center", c("Female", "Male"), col=colors, lwd=5)
par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"],col = colors[2], add=TRUE)
legend("center", c("Female", "Male"), col=colors, lwd=5)
hist(lrn2014$Attitude, main = "Attitude", xlab = "Attitude level", probability = TRUE)
par(mfrow=c(1,2))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"],col = colors[2], add=TRUE)
legend("center", c("Female", "Male"), col=colors, lwd=5)
hist(lrn2014$Attitude, main = "Attitude", xlab = "Attitude level", probability = TRUE)
par(mfrow=c(1,2))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"],col = colors[2], add=TRUE)
legend("center", c("Female", "Male"), col=colors, lwd=5)
hist(lrn2014$Attitude, main = "Attitude", xlab = "Attitude level", probability = TRUE, col = "green")
par(mfrow=c(1,2))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"],col = colors[2], add=TRUE)
legend("center", c("Female", "Male"), col=colors, lwd=5)
hist(lrn2014$Attitude, main = "Attitude", xlab = "Attitude level, all", probability = TRUE, col = "green")
library(GGally)
#library(GGally)
library(ggplot2)
install.packages(c("GGally", "ggplot2"))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn2014, mapping = aes(col = gender, size = attitude, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn2014, mapping = aes(col = gender, size = attitude, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn2014, mapping = aes(col = gender, size = attitude, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn2014, mapping = aes(col = gender, size = attitude, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
plot(p)
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn2014, mapping = aes(col = gender, size = attitude, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
#plot the fig
p
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
#plot the fig
p
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)), legend = as.vector(unique(lrn$gender)))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)), legend = as.vector(unique(lrn2014$gender)))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)), legend = unique(lrn2014$gender))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)), legend = C("Female", "Male"))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
gglegend("gender")
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20))upper = list(continuous = gglegend("gender"))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20))upper = list(continuous = gglegend("gender")))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)),upper = list(continuous = gglegend("gender")))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)),upper = list(continuous = gglegend("gender"))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)),upper = list(continuous = gglegend("gender")))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)),upper = list(continuous = gglegend(lrn2014$gender)))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
par(mfrow=c(1,2))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"],col = colors[2], add=TRUE)
legend("center", c("Female", "Male"), col=colors, lwd=5)
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Attitude[lrn2014$gender == "F"], main = "Attitude of respondents", xlab = "Attitude level", col = colors[1])
hist(lrn2014$Attitude[lrn2014$gender == "M"],col = colors[2], add=TRUE)
legend("center", c("Female", "Male"), col=colors, lwd=5)
par(mfrow=c(2,1))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Age[lrn2014$gender == "F"], main = "Age of respondents", xlab = "Age in years", col = colors[1])
hist(lrn2014$Age[lrn2014$gender == "M"],col = colors[2], add=TRUE)
legend("center", c("Female", "Male"), col=colors, lwd=5)
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(lrn2014$Attitude[lrn2014$gender == "F"], main = "Attitude of respondents", xlab = "Attitude level", col = colors[1])
hist(lrn2014$Attitude[lrn2014$gender == "M"],col = colors[2], add=TRUE)
legend("center", c("Female", "Male"), col=colors, lwd=5)
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3))
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = Age, alpha = 0.3))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(lrn2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# create a more advanced plot matrix with ggpairs()
model <- lm(Points ~ deep + stra + surf, data = lrn2014)
summary(model)
model <- lm(Points ~ stra + surf, data = lrn2014)
summary(model)
# create linear regression model with three explanatory variables to explain Points
model <- lm(Points ~ Attitude + stra + surf, data = lrn2014)
summary(model)
# create linear regression model with three explanatory variables to explain Points
model <- lm(Points ~ Attitude, data = lrn2014)
summary(model)
# create linear regression model with three explanatory variables to explain Points
model <- lm(Points ~ Attitude + stra + surf, data = lrn2014)
summary(model)
model <- lm(Points ~ Attitude + stra, data = lrn2014)
summary(model)
model <- lm(Points ~ Attitude, data = lrn2014)
summary(model)
plot(model, which <- c(1, 2, 5))
par(mfrow = c(2,2))
plot(model, which <- c(1, 2, 5))
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
colnames(math)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
math <- read.csv("./data/student-mat.csv")
por <- read.csv("./data/student-por.csv")
colnames(math)
colnames(por)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
source('C:/Users/antti/asalo/Opinnot/Intro to open data science/IODS-project/data/create_alc.R', echo=TRUE)
alc <- read.csv("./data/alc_cons.csv")
head(alc)
alc <- read.csv("./data/alc_cons.csv")
summary(alc)
alc <- read.csv("./data/alc_cons.csv")
glimpse(alc)
alc <- read.csv("./data/alc_cons.csv")
str(alc)
library(dplyr)
vars <- c("Pstatus", "failures","romantic","absences")
expl_data <- select(alc,one_of(vars))
library(dplyr)
vars <- c("Pstatus", "failures","romantic","absences")
expl_data <- select(alc,one_of(vars))
head(expl_data)
library(dplyr)
vars <- c("Pstatus", "failures","romantic","absences","alc_use","high_use")
my_data <- select(alc,one_of(vars))
head(my_data)
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(my_data, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(my_data, mapping = aes(col = alc_use, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
ggpairs(my_data, mapping = aes(col = high_use, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p <- pairs(my_data[1:5], col = my_data$high_use, main = "Scatterplot between descriptive features")
par(xpd=TRUE)
legend(0,1.1, as.vector(unique(my_data$high_use)), fill=c("black", "red"))
library(dplyr)
vars <- c("Pstatus", "failures","romantic","absences","alc_use","high_use")
my_data <- select(alc,one_of(vars))
head(my_data)
par(mfrow=c(2,2))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(my_data$Pstatus[my_data$high_use == "T"], main = "Parental status", xlab = "Age in years", col = colors[1])
par(mfrow=c(2,2))
colors <- c("blue", adjustcolor("red", alpha.f = 0.5))
hist(my_data$failures[my_data$high_use == "T"], main = "failures", xlab = "Age in years", col = colors[1])
par(mfrow=c(2,2))
# initialize a plot of alcohol use
g1 <- ggplot(data = my_data, aes(x = alc_use))
# define the plot as a bar plot and draw it
g1 + geom_bar()
par(mfrow=c(2,2))
# initialize a plot of alcohol use
g1 <- ggplot(data = my_data, aes(x = alc_use))
# define the plot as a bar plot and draw it
g1 + geom_bar()
# initialize a plot of alcohol use
g2 <- ggplot(data = my_data, aes(x = high_use))
# define the plot as a bar plot and draw it
g2 + geom_bar()
par(mfrow=c(2,2))
# initialize a plot of alcohol use
g1 <- ggplot(data = my_data, aes(x = alc_use))
# define the plot as a bar plot and draw it
g1 + geom_bar()
# initialize a plot of alcohol use
g2 <- ggplot(data = my_data, aes(x = high_use))
# define the plot as a bar plot and draw it
g2 + geom_bar()
library(ggplot2)
par(mfrow=c(2,2))
# initialize a plot of alcohol use
g1 <- ggplot(data = my_data, aes(x = alc_use))
# define the plot as a bar plot and draw it
g1 + geom_bar()
# initialize a plot of alcohol use
g2 <- ggplot(data = my_data, aes(x = high_use))
# define the plot as a bar plot and draw it
g2 + geom_bar()
library(GGally)
# create a more advanced plot matrix with ggpairs()
ggpairs(my_data, mapping = aes(col = high_use, alpha = 0.3))
library(ggplot2)
par(mfrow=c(2,2))
# initialize a plot of alcohol use
g1 <- ggplot(data = my_data, aes(x = alc_use))
# define the plot as a bar plot and draw it
g1 + geom_bar()
# initialize a plot of alcohol use
g2 <- ggplot(data = my_data, aes(x = high_use))
# define the plot as a bar plot and draw it
g2 + geom_bar()
# initialize a plot of alcohol use
g3 <- ggplot(data = my_data, aes(x = failures))
# define the plot as a bar plot and draw it
g3 + geom_bar()
# initialize a plot of alcohol use
g4 <- ggplot(data = my_data, aes(x = romantic))
# define the plot as a bar plot and draw it
g4 + geom_bar()
library(GGally)
# create a more advanced plot matrix with ggpairs()
ggpairs(my_data, mapping = aes(col = high_use, alpha = 0.3))
library(tidyr); library(dplyr); library(ggplot2)
par(mfrow=c(2,2))
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(GGally)
# create a more advanced plot matrix with ggpairs()
ggpairs(my_data, mapping = aes(col = high_use, alpha = 0.3))
# produce summary statistics by group
my_data %>% group_by(high_use) %>% summarise(count = n(), mean_use= mean(alc_use))
library(tidyr); library(dplyr); library(ggplot2)
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
# produce summary statistics by group
my_data %>% group_by(Pstatus) %>% summarise(count = n(), mean_use= mean(alc_use), high_use)
library(tidyr); library(dplyr); library(ggplot2)
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
# produce summary statistics by group
my_data %>% group_by(Pstatus) %>% summarise(count = n(), mean_use= mean(alc_use), high = high_use)
library(tidyr); library(dplyr); library(ggplot2)
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
# produce summary statistics by group
my_data %>% group_by(Pstatus) %>% summarise(count = n(), mean_use= mean(alc_use))
library(tidyr); library(dplyr); library(ggplot2)
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
# produce summary statistics by group
my_data %>% group_by(Pstatus) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(failures) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(romantic) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(absences) %>% summarise(count = n(), mean_use= mean(alc_use))
# produce summary statistics by group
my_data %>% group_by(Pstatus) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(failures) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(romantic) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(absences>4) %>% summarise(count = n(), mean_use= mean(alc_use))
# produce summary statistics by group
my_data %>% group_by(Pstatus) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(failures) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(romantic) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(absences>3) %>% summarise(count = n(), mean_use= mean(alc_use))
# produce summary statistics by group
my_data %>% group_by(Pstatus) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(failures) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(romantic) %>% summarise(count = n(), mean_use= mean(alc_use))
my_data %>% group_by(absences>6) %>% summarise(count = n(), mean_use= mean(alc_use))
library(tidyr); library(dplyr); library(ggplot2)
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
gather(my_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
# initialise a plot of high_use and absences
g2 <- ggplot(my_data, aes(x = high_use, y = absences, col = Pstatus))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("absences") + ggtitle("Alcohol consumption and absence from school")
# initialise a plot of high_use and absences
g2 <- ggplot(my_data, aes(x = high_use, y = failures, col = Pstatus))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("absences") + ggtitle("Alcohol consumption and failures in school")
# initialise a plot of high_use and absences
g2 <- ggplot(my_data, aes(x = high_use, y = failures, col = romantic))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("failures") + ggtitle("Alcohol consumption and failures in school")
# initialise a plot of high_use and absences
g2 <- ggplot(my_data, aes(x = high_use, y = absences, col = romantic))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("absences") + ggtitle("Alcohol consumption and absences from school for students in/out of relationships")
# initialise a plot of high_use and absences
g2 <- ggplot(my_data, aes(x = high_use, y = absences, col = romantic))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("absences") + ggtitle("Alcohol consumption and absences from school for students in/out of relationships")
m <- glm(high_use ~ failures + absences + romantic + Pstatus, data = my_data, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
m <- glm(high_use ~ failures + absences, data = my_data, family = "binomial")
# print out a summary of the model
summary(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, failures, absences, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
my_data <- mutate(my_data, probability = probabilities)
# use the probabilities to make a prediction of high_use
my_data <- mutate(my:data, prediction = probability > 0.5)
# see the last ten original classes, predicted probabilities, and class predictions
select(my_data, failures, absences, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = my_data$high_use, prediction = my_data$prediction)
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'my_data'
my_data <- mutate(my_data, probability = probabilities)
# use the probabilities to make a prediction of high_use
my_data <- mutate(my_data, prediction = probability > 0.5)
# see the last ten original classes, predicted probabilities, and class predictions
select(my_data, failures, absences, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = my_data$high_use, prediction = my_data$prediction)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(my_data, aes(x = probability, y = high_use))
# define the geom as points and draw the plot
g + geom_point(aes(col = prediction))
# tabulate the target variable versus the predictions
table(high_use = my_data$high_use, prediction = my_data$prediction)%>% prop.table()%>%addmargins()
